package rv32

import chisel3._
import chisel3.util._

object Instructions {
  // U-type instructions
  val auipc = BitPat("b??????? ????? ????? ??? ????? 00101 11")
  val lui   = BitPat("b??????? ????? ????? ??? ????? 01101 11")

  // I-type instructions
  val lw    = BitPat("b??????? ????? ????? 010 ????? 00000 11")
  val lbu   = BitPat("b??????? ????? ????? 100 ????? 00000 11")
  val lb    = BitPat("b??????? ????? ????? 000 ????? 00000 11")
  val lh    = BitPat("b??????? ????? ????? 001 ????? 00000 11")
  val lhu   = BitPat("b??????? ????? ????? 101 ????? 00000 11")
  val andi  = BitPat("b??????? ????? ????? 111 ????? 00100 11")
  val addi  = BitPat("b??????? ????? ????? 000 ????? 00100 11")
  val xori  = BitPat("b??????? ????? ????? 100 ????? 00100 11")
  val ori   = BitPat("b??????? ????? ????? 110 ????? 00100 11")
  val srai  = BitPat("b0100000 ????? ????? 101 ????? 00100 11")
  val srli  = BitPat("b0000000 ????? ????? 101 ????? 00100 11")
  val slli  = BitPat("b0000000 ????? ????? 001 ????? 00100 11")
  val sltiu = BitPat("b??????? ????? ????? 011 ????? 00100 11")
  val slti  = BitPat("b??????? ????? ????? 010 ????? 00100 11")
  val jalr  = BitPat("b??????? ????? ????? 000 ????? 11001 11")

  // S-type instructions
  val sb    = BitPat("b??????? ????? ????? 000 ????? 01000 11")
  val sw    = BitPat("b??????? ????? ????? 010 ????? 01000 11")
  val sh    = BitPat("b??????? ????? ????? 001 ????? 01000 11")

  // B-type instructions
  val blt   = BitPat("b??????? ????? ????? 100 ????? 11000 11")
  val bltu  = BitPat("b??????? ????? ????? 110 ????? 11000 11")
  val bge   = BitPat("b??????? ????? ????? 101 ????? 11000 11")
  val bgeu  = BitPat("b??????? ????? ????? 111 ????? 11000 11")
  val beq   = BitPat("b??????? ????? ????? 000 ????? 11000 11")
  val bne   = BitPat("b??????? ????? ????? 001 ????? 11000 11")

  // R-type instructions
  val sra   = BitPat("b0100000 ????? ????? 101 ????? 01100 11")
  val srl   = BitPat("b0000000 ????? ????? 101 ????? 01100 11")
  val rem   = BitPat("b0000001 ????? ????? 110 ????? 01100 11")
  val remu  = BitPat("b0000001 ????? ????? 111 ????? 01100 11")
  val divu  = BitPat("b0000001 ????? ????? 101 ????? 01100 11")
  val div   = BitPat("b0000001 ????? ????? 100 ????? 01100 11")
  val mul   = BitPat("b0000001 ????? ????? 000 ????? 01100 11")
  val mulh  = BitPat("b0000001 ????? ????? 001 ????? 01100 11")
  val mulhu = BitPat("b0000001 ????? ????? 011 ????? 01100 11")
  val and   = BitPat("b0000000 ????? ????? 111 ????? 01100 11")
  val sll   = BitPat("b0000000 ????? ????? 001 ????? 01100 11")
  val add   = BitPat("b0000000 ????? ????? 000 ????? 01100 11")
  val sub   = BitPat("b0100000 ????? ????? 000 ????? 01100 11")
  val sltu  = BitPat("b0000000 ????? ????? 011 ????? 01100 11")
  val slt   = BitPat("b0000000 ????? ????? 010 ????? 01100 11")
  val xor   = BitPat("b0000000 ????? ????? 100 ????? 01100 11")
  val or    = BitPat("b0000000 ????? ????? 110 ????? 01100 11")

  // J-type instructions
  val jal   = BitPat("b??????? ????? ????? ??? ????? 11011 11")

  // System instructions
  val ebreak = BitPat("b0000000 00001 00000 000 00000 11100 11")
}